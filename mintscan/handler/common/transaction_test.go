package common

import (
	"strings"
	"testing"

	"github.com/cosmostation/cosmostation-cosmos/mintscan/model"
	"go.uber.org/zap"
)

// 정환님 트랜잭션 요청 벤치마크 테스트 코드

// func BenchmarkNewTxWithContext(b *testing.B) {
// 	for i := 0; i < b.N; i++ {
// 		TestNewTx(new(testing.T))
// 	}
// }

/*
This test have to return
    TestNewTx: transaction_test.go:91: 0 run) 200 OK, received data length : 8310
    TestNewTx: transaction_test.go:91: 1 run) 200 OK, received data length : 6861
    TestNewTx: transaction_test.go:79: 2 run) 400 Bad Request, Msg : {"error_code":202,"error_msg":"Invalid format"}
    TestNewTx: transaction_test.go:91: 3 run) 200 OK, received data length : 101
    TestNewTx: transaction_test.go:91: 4 run) 200 OK, received data length : 82425
*/
// func TestNewTx(t *testing.T) {
// 	req := http.HandlerFunc(GetNewTx)
// 	handler := Middleware(req)
// 	server := httptest.NewServer(handler)
// 	defer server.Close()

// 	//data sample
// 	var dataSample []string
// 	// 5 valid tx hash
// 	dataSample = append(dataSample, "{ \"tx_list\": [ \"FC0B1D327E43AD5163F409FF86691DF67C071DC12E82A420009EB2B7A6DC6EBD\", \"D2511EEF91412AC48167C88E37AE50D755C6578B42840BBF63B46B3F45CCA805\", \"6F3C2A8AFAB05DDF8CADA9D8855B77552E04B833FF5B693727372F43682E8216\", \"31EEA0563CB54DA3FEE43C43C4A7B51F38762BB94219424B328DB5D190F9F943\", \"E72C25D206D1A5E7459FFF2C38C1B4536D7935747FCAF7E2681ED44115A3FB18\", \"\" ] }")
// 	// unvalid tx hash
// 	dataSample = append(dataSample, "{ \"tx_list\": [ \"aaaaaFC0B1D327E43AD5163F409FF86691DF67C071DC12E82A420009EB2B7A6DC6EBD\", \"D2511EEF91412AC48167C88E37AE50D755C6578B42840BBF63B46B3F45CCA805\", \"6F3C2A8AFAB05DDF8CADA9D8855B77552E04B833FF5B693727372F43682E8216\", \"31EEA0563CB54DA3FEE43C43C4A7B51F38762BB94219424B328DB5D190F9F943\", \"E72C25D206D1A5E7459FFF2C38C1B4536D7935747FCAF7E2681ED44115A3FB18\", \"\" ] }")
// 	// malformed json
// 	dataSample = append(dataSample, "{ \"tx_list\": [ \"asdf\",, \"\", \"\", \"\"] }")
// 	// empty tx hash list
// 	dataSample = append(dataSample, "{ \"tx_list\": [ \"\", \"\", \"\", \"\"] }")
// 	// 50 tx hash list
// 	dataSample = append(dataSample, "{ \"tx_list\": [ \"D42A1DF5F6F1C6F3F8B29AC9AE3928E150673864BF67936A571D296DDA81C0E4\", \"86FC05F30C6FB6539D2C2AE33A53023A039F9D0EB2A48444BBDEDC94E86293B3\", \"A16AAF6685D2D3B6D7E7B1A5BEB329A1CB472ED7874ACE257C358286FD3522C9\", \"35CB22A093DEF13F3ED8C983FCC1DACEC0F1DF30F03D96AA2C04EB85F0FB05E8\", \"D271A14024DA1BEB197B57FF08923875C81B5DAF01C9C50456420259D1C0C14C\", \"229AE9CC990884D99C45DB58F2FBDDF761155C0F1395F7A0AF721F369BD7D967\", \"5F1FE880227B12BE72F8701CF7D480094ADC28D50F7790A0A3ED842CEC9F77CC\", \"40390A39EAC063ADEB4FF7AA9FD1C681B8D756FD2D07D54839E5E8E5A4692FA7\", \"D9EF71B707252E2A9CB8D833E1B0B60810126CB536DFD7502EC38F7A398E5B93\", \"2EEB215CF645918B957E2C9104F4588F7E7A68585CBF17F2871266230C87B226\", \"D8BF75A63B32F5C4533DBA60D9C299692F23140A2CE5E9375396F9618A6B20EA\", \"8C636166BC523D6D1E498ED0FAC417CDFFA330ECF5E5176CE7F99320DAE20A28\", \"E6C0A83430852DFDC7C8D29FE80EF968DDB13F0624AF93558D8CAE80BB3BB7A6\", \"55F40D60379621EDFB816C8871B1A908EB48AB2B4D93E0CAD16CA0A16436CF88\", \"F66D86DB351BC0DD07DD9B51902D4FE341BBF5BDD3485AB2DDB04DA57E2118EE\", \"05FB043993F5204C2C65D3F3B45779CD8259D85CBC8258655C9A46243E3B7B02\", \"E92E3BF76265A12BAB593E32A581BBA7B795542D06A5A545BBAC42E50F3F6C62\", \"2433C77A4CFC190CEA5FEE0687D2A63868968646B02D987484B859CDEED17EB4\", \"914A56D89C32B62D4170E58E10BAD6DBB0D848DCD51228C222BC6E5B2E5EAF98\", \"C6CBE807604769C6B1E6A0D94DE8EF64BDD276E1CE5C988EFB6BF7EDEFE68726\", \"1D3F0A29BD350549D3A184A8A2E44573BDB7495035E52444202E0BEAEFB4FB82\", \"167068AAF882D5FA45315E8A58C92FA5945321F4782DC0C96BD3C07D409F3B61\", \"CFF20C2568BCE7D0F2513689B54E7354090D3E65FEC1A89E1A38CB5C3A3712A7\", \"3B9E7C256B5C04922BF2E9CA8963F608CC9271691A39C2B1782C6F1C1E79675C\", \"C21E81758EDBF8E90E4733A4170BA0404F088ECE9EB61DFAAEDC45CB9D1DCEBA\", \"5AD043B2CDFF0A478A8D4FC1B3832ACED68D12B37901D9E90FE01FC374999DAB\", \"275F27C1E33909092E6CE92D5AA71FFE7F983AB1BC09D7B6873AB1A47FE6E1E8\", \"B7BD42CB68DFA0BD8BADD734CB2FB93C1C8BC9069A42B5F50E944194B2100817\", \"DAD805524802F1828DC6D4173FB3C1D1B78519FE9883D5BC395CC636AEA3C61A\", \"CA89C6E9D0722EA715CF9CF2C79249FA9D1815B79E3927689E27DBA4A309C48C\", \"B9B22AD3BA4C7752218824E6065473E8980FCBC24DFD8466F3DAE1AF19951A6B\", \"7A80547E941CFF57C00093D6EA8450DCFB3E167A5525AF690C0F5FD63A0931EF\", \"C7796FCB076B5F52AE805BD8293481F5D0C2D9DF05CAFD1E2DF9D56F70FF7F87\", \"42A939AA4208CE0F63CCB792B4707C821C36961EB9B89646C96C496DE92EB9CD\", \"560C365FF851FCDC366379196F20C5723ABDF604EEA528EAE760CEA07D75EDA6\", \"66A761430BD39C838CD42AB7BDA2FF5B861830AFF577A171857B2422A7652438\", \"B3C8383B2080ECE2DB5DF9FC239196C355C320DC6988BE0E1FBEFCEF7292F0A6\", \"CE4CD1555F55B59A2CEDE1281EC8D043C281D140DD2C91B0AAB92F6BF11F57B3\", \"4F4DD23CFAF9D85816BF0FEEBD010BFEA1B9E23E1CC6D6536DB2E3AF08B06228\", \"6767F0E8A1D2B9508466D09C6F324AF29814BB744F59DE8179D04650E18815D4\", \"C112A2C48FD84FC2C2D4E1B29C195296A9C0A5462B0DD0C02049340B5CCE6FAF\", \"61B760C23F5160F38547ABA34B2954375EB83E4E38794EFEF306DB0EA9A8090D\", \"281D2A236CCACE1F52C030A5A9D95FEC617621AED1E65646C621C80C0B461F0F\", \"0AC0C117D443A02D86372F75806179D68D2909A4B48B87F3170803794AD40A1C\", \"7523F5AF65FEB66E866110C8267DAD2D8F9AF4C77A33B77BD4FB71BC47243DF5\", \"E1B76A8B9334952980631FC92E7B695B1C687310298AD094E23EBBAA21029F89\", \"1C01F66043CCB1BD6F803F4C25EDFB0A1CF32E2FF48CC1244A0D4694E9E4004F\", \"7640DF0FBD637E07F8408A72F7AA7F458F6B91D7C22C380725FB3563971E9C70\", \"8FC3D2F4569E2CAD9312AF57730C65E1D1BEED29035FAB42CDBE987F5FE188F8\", \"9B12DFDA0A4926537E3E6A4DC88C9394B64599AB16033B2FB80CEE7A08994809\" ] }")

// 	for i, s := range dataSample {
// 		resp, err := http.Post(server.URL, "application/json", strings.NewReader(s))
// 		if err != nil {
// 			t.Errorf("%d run) Post error %v\n", i, err)
// 			continue
// 		}
// 		defer resp.Body.Close()

// 		if status := resp.StatusCode; status != http.StatusOK {
// 			errMsg, err := ioutil.ReadAll(resp.Body)
// 			if err != nil {
// 				t.Errorf("%d run) %s\n", i, resp.Status)
// 			}
// 			t.Errorf("%d run) %s, Msg : %s\n", i, resp.Status, errMsg)
// 			continue
// 		}

// 		data, err := ioutil.ReadAll(resp.Body)
// 		if err != nil {
// 			t.Errorf("%d run) got error while read data : %v \n", i, err)
// 			t.Error(err)
// 			continue
// 		}

// 		_ = data
// 		t.Logf("%d run) %s, received data length : %d\n", i, resp.Status, len(data))
// 		//t.Log(string(data))
// 	}
// }

func TestTrasnactionHash(t *testing.T) {

	var txList model.TxList
	var reqTxs model.TxList
	TxHashes := []string{
		"BA914C2C12C0A103BDDFA0F4A672C7439487AD2E1387B0E2414EEAAC7C85548E",
		"BA914C2C12C0A103BDDFA0F4A672C7439487AD2E1387B0E2414EEAAC7C85548Einvalid", //invalid
		"0xF7E21D6540D11D2043E1A951C4C9D3FA8957AD05882AC34068DA83C76E0B15A7",      //0x
		"0xF7E21D6540D11D2043E1A951C4C9D3FA8957AD05882AC34068DA83C76E0B15invalid", //0x invalid
	}
	txList.TxHash = TxHashes

	for i := range txList.TxHash {

		if strings.Contains(txList.TxHash[i], "0x") {
			txList.TxHash[i] = txList.TxHash[i][2:]
			t.Log("remove 0x :", txList.TxHash[i])
		}
		if len(txList.TxHash[i]) != 64 {
			zap.L().Debug("tx hash length is invalid", zap.String("txHashStr", txList.TxHash[i]))
			continue
		}
		txList.TxHash[i] = strings.ToUpper(txList.TxHash[i])
		t.Log("target :", txList.TxHash[i])
		reqTxs.TxHash = append(reqTxs.TxHash, txList.TxHash[i])

	}
	t.Log("final :")
	for _, txhash := range reqTxs.TxHash {
		t.Log(txhash)
	}
}
